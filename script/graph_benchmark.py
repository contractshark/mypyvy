import os
import sys
import re
import matplotlib.pyplot as plt
from ast import literal_eval

KOD_RESULTS_DIRECTORY_PATH = '../_KOD_RESULTS/'
Z3_RESULTS_DIRECTORY_PATH = '../_Z3_RESULTS/'
BENCH_FILES_DIRECTORY_PATH = 'files/'

def get_filename(file, prefix, suffix):
    filename = os.path.basename(file)
    return filename[len(prefix):filename.find(suffix)]

def fill_params_map(files_map, run_files):
    for file in run_files:
        with open(file, 'r') as f:
            inpt = f.read()
            run_params = tuple(list(literal_eval(inpt).values()))
        files_map[get_filename(file, '_Z3_', '.run')] = run_params

def get_kod_params(filename):
    # so_far = os.path.splitext(filename)[0]
    so_far = filename[:filename.rfind('.kod.result')]
    classname, ition, remove_index, check_index, bound = so_far.rsplit('__', 4)
    return classname, ition, int(remove_index) if remove_index != 'None' else -1, int(check_index), int(bound)

def get_params(filename, suffix):
    so_far = filename[:filename.rfind(suffix)]
    classname, ition, remove_index, check_index = so_far.rsplit('__', 3)
    return classname, ition, int(remove_index) if remove_index != 'None' else -1, int(check_index)

def fill_z3_map(z3_results, result_files):
    '''
    {
        'lockserv':
        {
            ('request_msg', 1, 0): (unsat, 6ms),
            ('request_msg', 2, 3): (sat, 3ms),
        }
    }
    '''
    for file in result_files:
        with open(file, 'r') as f:
            result = f.readlines()
        
        filename = os.path.basename(file)
        classname, ition, remove_index, check_index = get_params(filename, '.z3.out')
        if result[0].strip() in ('sat', 'unsat', 'unknown'):
            outcome = result[0].strip()
            # try:
            time = int(float(result[1].strip()) * 1000) # time is reported in seconds
            # except:
            #     print('EXCEPT TIMEOUT')
            #     outcome = 'TIMEOUT'
            #     time = -1
        else:
            outcome = 'TIMEOUT'
            time = -1
        if not classname in z3_results:
            z3_results[classname] = {}
        z3_results[classname][(ition, remove_index, check_index)] = (outcome, time)
        

MAXIMUM_BOUND = 10
bench_params = {}
def fill_kod_map(kod_results, result_files):
    '''
    kod_results is something like this:
    {
        'lockserv':
        {
            ('request_msg', 1, 0):
            {
                1: (unsat, 3ms),
                2: (unsat, 5ms),
                3: (sat, 2ms)
            }
            ...
        }
        ...
    }
    '''
    for file in result_files:
        # print('file', file)
        with open(file, 'r') as f:
            try:
                result = literal_eval(f.read())
            except:
                print('ERROR reading file')
                continue
        filename = os.path.basename(file)
        classname, ition, remove_index, check_index, bound = get_kod_params(filename)
        if not classname in kod_results:
            kod_results[classname] = {}
        if not (ition, remove_index, check_index) in kod_results[classname]:
            kod_results[classname][(ition, remove_index, check_index)] = {}
        kod_results[classname][(ition, remove_index, check_index)][bound] = (result['outcome'], result['solving_time'] + result['translation_time'])

def complete_kod_map(kod_results):
    print('keys: ', kod_results.keys())
    for classname in kod_results:
        if not classname in bench_params: # ERROR:
            assert False, f'{classname} was not generated by read_bench_params(), but is in kod_results'
        for params in bench_params[classname]:
            if not params in kod_results[classname]:
                assert False, f'{params} is not in kod_results!'
            bounds_dict = kod_results[classname][params]
            # TIMEOUT OR MEMORY ERROR
            if len(bounds_dict.keys()) < MAXIMUM_BOUND and bounds_dict[max(bounds_dict.keys())][0] != 'SATISFIABLE':
                bounds_dict[-1] = ('TIMEOUT', -1)

def read_bench_params(bench_params):
    for root, _, files in os.walk(BENCH_FILES_DIRECTORY_PATH):
        for f in files:
            if re.match(r'.*[.]bench_files', f):
                params = []
                with open(os.path.join(root, f), 'r') as file:
                    result_files = file.readlines()
                for run in result_files:
                    (_, ition, remove_index, check_index) = get_params(run, '.bench_files')
                    params.append((ition, remove_index, check_index))
                bench_params[os.path.splitext(f)[0]] = params

if __name__ == '__main__':
    read_bench_params(bench_params)
    kod_results_files = [os.path.join(root, f) for root, _, files in os.walk(KOD_RESULTS_DIRECTORY_PATH) for f in files if f.endswith('.kod.result')]
    z3_results_files = [os.path.join(root, f) for root, _, files in os.walk(Z3_RESULTS_DIRECTORY_PATH) for f in files if f.endswith('.z3.out')]
    # run_files = [os.path.join(root, f) for root, _, files in os.walk(Z3_RESULTS_DIRECTORY_PATH) for f in files if re.match(r'.*[.]run', f)]
    # params_map = {}
    # fill_params_map(params_map, run_files)
    kod_results = {}
    z3_results = {}
    fill_kod_map(kod_results, kod_results_files)
    fill_z3_map(z3_results, z3_results_files)
    complete_kod_map(kod_results) # if kodkod times out, files won't be written unlike z3
    # print(kod_results)
    print(z3_results)

    # combined_with_bounds
    x_sat = []
    y_sat = [] 
    x_unsat = []
    y_unsat = []
    timeouts = 0
    for file_results in kod_results.values():
        for results in file_results.values(): # for every transition, remove_index, check_index
            total_time = 0
            sat = False
            bound = 0
            for bound, (out, t) in enumerate(results.values()):
                if bound == -1:
                    timeouts += 1
                    continue
                if out == 'SATISFIABLE':
                    sat = True
                total_time += t
            if sat:
                y_sat.append(total_time)
                x_sat.append(bound + 1)
            else:
                y_unsat.append(total_time)
                x_unsat.append(bound + 1)
    plt.figure()
    plt.plot(x_unsat, y_unsat, 'o', c='darkorange', alpha=0.3)
    plt.plot(x_sat, y_sat, 'o', c='royalblue', alpha=0.3)
    plt.figtext(.8, .8, f'Timeouts: {timeouts}')
    plt.legend(['unsat', 'sat'])
    plt.show()
    plt.savefig('combined_with_bounds.png')

    # kod_vs_z3_no_bounds
    kod_y = []
    z3_y = []
    kod_timeouts = 0
    z3_timeouts = 0
    for file_results in kod_results.values():
        for results in file_results.values(): # for every transition, remove_index, check_index
            total_time = 0
            bound = 0
            for bound, (_, t) in enumerate(results.values()):
                if bound == -1:
                    kod_timeouts += 1
                    continue
                total_time += t
            kod_y.append(total_time)
    for file_results in z3_results.values():
        for outcome, t in file_results.values(): # for every transition, remove_index, check_index
            if t == -1:
                z3_timeouts += 1
                z3_y.append(-1)
            else:
                z3_y.append(t)
    print(f'z3_timeouts: {z3_timeouts}')
    plt.figure()
    plt.plot(kod_y, 'o', color='royalblue', alpha=0.3)
    plt.plot(z3_y, 'o', color='darkorange', alpha=0.3)
    plt.legend(['Kodkod', 'Z3'])
    plt.figtext(.8, .8, f'Kod Timeouts: {kod_timeouts}')
    plt.figtext(.75, .75, f'Z3 Timeouts: {z3_timeouts}')
    plt.show()
    plt.savefig('combined_no_bounds.png')

    # For every file
    for filename, file_results in kod_results.items():
        y = []
        timeouts = 0
        res = []
        for results in file_results.values(): # for every transition, remove_index, check_index
            total_time = 0
            for bound, (out, t) in results.items():
                if t == -1:
                    timeouts += 1
                else:
                    total_time += t
            y.append(total_time)
        plt.figure()
        plt.plot(y, 'o', color='royalblue', alpha=0.3)
        plt.show()
        plt.savefig(f'{filename}.png')

    x = []
    y = []
    for r in kod_results.values():
        for rr in r.values():
            for bound, (res, t) in rr.items():
                if res == 'UNSATISFIABLE':
                    x.append(bound)
                    y.append(t)
    plt.figure()
    plt.plot(x, y, 'o')
    x = []
    y = []
    for r in kod_results.values():
        for rr in r.values():
            for bound, (res, t) in rr.items():
                if res == 'SATISFIABLE':
                    x.append(bound)
                    y.append(t)
    plt.plot(x, y, 'o')
    plt.savefig('bound.png')